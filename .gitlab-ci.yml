image: golang:1.22.2
      
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .go/pkg/mod/

variables:
  GOPATH: $CI_PROJECT_DIR/.go
  OUTPUT_NAME: __bin__/$CI_PROJECT_NAME

stages:
  - lint
  - test
  - build

lint:
    image: golangci/golangci-lint:v1.57.2
    stage: lint
    allow_failure: false
    script:
      - mkdir -p .go
      - golangci-lint run -vc .golangci.yml

build:
  stage: build
  script:
    - mkdir -p $OUTPUT_NAME
    - go build -o $OUTPUT_NAME ./...
  artifacts:
    expire_in: 1 day
    paths:
      - $OUTPUT_NAME

test_reports:
  stage: test
  script:
    - go test ./... -short -coverprofile=coverage.out -covermode count
    - go get github.com/boumenot/gocover-cobertura@v1.2.0
    - go run github.com/boumenot/gocover-cobertura < coverage.out > coverage.xml 
    
    - go get gotest.tools/gotestsum@v1.12.0
    - go run gotest.tools/gotestsum --junitfile junit.xml --format testname -- -short
    
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
      - coverage.xml
      - junit.xml
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

.package_tests:
  stage: test
  coverage: '/coverage: \d+.\d+% of statements/'
  script: go test $(go list ./... | grep $PKG) -cover -short

test_pkg_controllers:
  extends: .package_tests
  variables:
    PKG: controllers

test_pkg_filesystem:
  extends: .package_tests
  variables:
    PKG: filesystem

test_pkg_models:
  extends: .package_tests
  variables:
    PKG: models

test_pkg_services:
  extends: .package_tests
  variables:
    PKG: services

test_pkg_utils:
  extends: .package_tests
  variables:
    PKG: utils
