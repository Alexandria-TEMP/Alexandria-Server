basePath: /api/v2
definitions:
  forms.BranchCreationForm:
    properties:
      anonymous:
        type: boolean
      branchTitle:
        type: string
      collaboratingMemberIDs:
        description: The branch's metadata
        items:
          type: integer
        type: array
      projectPostID:
        type: integer
      updatedCompletionStatus:
        $ref: '#/definitions/models.ProjectCompletionStatus'
      updatedFeedbackPreferences:
        $ref: '#/definitions/models.ProjectFeedbackPreference'
      updatedPostTitle:
        description: Changes made by the branch
        type: string
      updatedScientificFields:
        items:
          $ref: '#/definitions/tags.ScientificField'
        type: array
    type: object
  forms.DiscussionCreationForm:
    properties:
      anonymous:
        description: If anonymous, the discussion will ignore member ID
        type: boolean
      memberID:
        type: integer
      text:
        type: string
    type: object
  forms.FilterForm:
    type: object
  forms.GroupedBranchForm:
    properties:
      openForReviewIDs:
        items:
          type: integer
        type: array
      peerReviewedIDs:
        items:
          type: integer
        type: array
      rejectedIDs:
        items:
          type: integer
        type: array
    type: object
  forms.MemberCreationForm:
    properties:
      email:
        type: string
      fields:
        items:
          $ref: '#/definitions/tags.ScientificFieldTag'
        type: array
      firstName:
        type: string
      institution:
        type: string
      lastName:
        type: string
      password:
        description: |-
          making the password just a string for now
          TODO: some hashing or semblance of security
        type: string
    type: object
  forms.PostCreationForm:
    properties:
      anonymous:
        type: boolean
      authorMemberIDs:
        items:
          type: integer
        type: array
      postType:
        $ref: '#/definitions/models.PostType'
      scientificFieldTags:
        items:
          $ref: '#/definitions/tags.ScientificField'
        type: array
      title:
        type: string
    type: object
  forms.ProjectPostCreationForm:
    properties:
      completionStatus:
        $ref: '#/definitions/models.ProjectCompletionStatus'
      feedbackPreference:
        $ref: '#/definitions/models.ProjectFeedbackPreference'
      postCreationForm:
        $ref: '#/definitions/forms.PostCreationForm'
    type: object
  forms.ReplyDiscussionCreationForm:
    properties:
      discussion:
        $ref: '#/definitions/forms.DiscussionCreationForm'
      parentID:
        description: The Discussion this Discussion will be added to
        type: integer
    type: object
  forms.ReportCreationForm:
    type: object
  forms.ReviewCreationForm:
    properties:
      branchReviewDecision:
        $ref: '#/definitions/models.BranchReviewDecision'
      feedback:
        type: string
      reviewingMemberID:
        type: integer
    type: object
  forms.RootDiscussionCreationForm:
    properties:
      containerID:
        description: The DiscussionContainer this Discussion will be added to
        type: integer
      discussion:
        $ref: '#/definitions/forms.DiscussionCreationForm'
    type: object
  models.BranchCollaboratorDTO:
    properties:
      branchID:
        type: integer
      id:
        type: integer
      memberID:
        type: integer
    type: object
  models.BranchDTO:
    properties:
      branchOverallReviewStatus:
        $ref: '#/definitions/models.BranchOverallReviewStatus'
      branchTitle:
        type: string
      collaboratorIDs:
        description: MR metadata
        items:
          type: integer
        type: array
      discussionIDs:
        items:
          type: integer
        type: array
      id:
        type: integer
      newPostTitle:
        description: MR's proposed changes
        type: string
      projectPostIDs:
        type: integer
      renderStatus:
        $ref: '#/definitions/models.RenderStatus'
      reviewIDs:
        items:
          type: integer
        type: array
      updatedCompletionStatus:
        $ref: '#/definitions/models.ProjectCompletionStatus'
      updatedScientificFields:
        items:
          $ref: '#/definitions/tags.ScientificField'
        type: array
    type: object
  models.BranchOverallReviewStatus:
    enum:
    - open for review
    - peer reviewed
    - rejected
    type: string
    x-enum-varnames:
    - BranchOpenForReview
    - BranchPeerReviewed
    - BranchRejected
  models.BranchReviewDTO:
    properties:
      branchID:
        type: integer
      branchReviewDecision:
        $ref: '#/definitions/models.BranchReviewDecision'
      createdAt:
        type: string
      feedback:
        type: string
      id:
        type: integer
      memberID:
        type: integer
    type: object
  models.BranchReviewDecision:
    enum:
    - rejected
    - approved
    type: string
    x-enum-varnames:
    - Rejected
    - Approved
  models.CollaborationType:
    enum:
    - author
    - contributor
    - reviewer
    type: string
    x-enum-varnames:
    - Author
    - Contributor
    - Reviewer
  models.DiscussionContainerDTO:
    properties:
      discussionIDs:
        items:
          type: integer
        type: array
    type: object
  models.DiscussionDTO:
    properties:
      id:
        type: integer
      memberID:
        type: integer
      replyIDs:
        items:
          type: integer
        type: array
      text:
        type: string
    type: object
  models.MemberDTO:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      institution:
        type: string
      lastName:
        type: string
      password:
        type: string
      scientificFieldTags:
        items:
          $ref: '#/definitions/tags.ScientificField'
        type: array
    type: object
  models.PostCollaboratorDTO:
    properties:
      collaborationType:
        $ref: '#/definitions/models.CollaborationType'
      id:
        type: integer
      memberID:
        type: integer
      postID:
        type: integer
    type: object
  models.PostDTO:
    properties:
      collaboratorIDs:
        items:
          type: integer
        type: array
      discussionIDs:
        items:
          type: integer
        type: array
      id:
        type: integer
      postType:
        $ref: '#/definitions/models.PostType'
      scientificFieldTags:
        items:
          $ref: '#/definitions/tags.ScientificField'
        type: array
      title:
        type: string
    type: object
  models.PostType:
    enum:
    - project
    - question
    - reflection
    type: string
    x-enum-varnames:
    - Project
    - Question
    - Reflection
  models.ProjectCompletionStatus:
    enum:
    - idea
    - ongoing
    - completed
    type: string
    x-enum-varnames:
    - Idea
    - Ongoing
    - Completed
  models.ProjectFeedbackPreference:
    enum:
    - discussion feedback
    - formal feedback
    type: string
    x-enum-varnames:
    - DiscussionFeedback
    - FormalFeedback
  models.ProjectPostDTO:
    properties:
      closedBranchIDs:
        items:
          type: integer
        type: array
      completionStatus:
        $ref: '#/definitions/models.ProjectCompletionStatus'
      feedbackPreference:
        $ref: '#/definitions/models.ProjectFeedbackPreference'
      id:
        type: integer
      openBranchIDs:
        items:
          type: integer
        type: array
      post:
        $ref: '#/definitions/models.PostDTO'
      postReviewStatus:
        $ref: '#/definitions/models.ProjectReviewStatus'
    type: object
  models.ProjectReviewStatus:
    enum:
    - open
    - revision needed
    - reviewed
    type: string
    x-enum-varnames:
    - Open
    - RevisionNeeded
    - Reviewed
  models.RenderStatus:
    enum:
    - success
    - pending
    - failure
    type: string
    x-enum-varnames:
    - Success
    - Pending
    - Failure
  models.ReportDTO:
    type: object
  reports.DiscussionReportDTO:
    properties:
      discussionID:
        type: integer
    type: object
  reports.PostReportDTO:
    properties:
      postID:
        type: integer
    type: object
  tags.ScientificField:
    enum:
    - mathematics
    - computer science
    type: string
    x-enum-varnames:
    - Mathematics
    - ComputerScience
  tags.ScientificFieldTag:
    type: object
  utils.HTTPError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API of Alexandria.
  title: Alexandria API
  version: "2.0"
paths:
  /branches:
    post:
      consumes:
      - application/json
      description: |-
        Create a new branch linked to a project post.
        Note that Member IDs passed here, get converted to Collaborator IDs.
      parameters:
      - description: Branch Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.BranchCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BranchDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new branch
      tags:
      - branches
    put:
      consumes:
      - application/json
      description: Update any number of the aspects of a branch
      parameters:
      - description: Updated Branch
        in: body
        name: branch
        required: true
        schema:
          $ref: '#/definitions/models.BranchDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update branch
      tags:
      - branches
  /branches/{branchID}:
    delete:
      consumes:
      - application/json
      description: Delete a branch with given ID from database
      parameters:
      - description: branch ID
        in: path
        name: branchID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete a branch
      tags:
      - branches
    get:
      consumes:
      - application/json
      description: Get a branch by branch ID
      parameters:
      - description: Branch ID
        in: path
        name: branchID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BranchDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get branch
      tags:
      - branches
  /branches/{branchID}/can-review/{userID}:
    get:
      consumes:
      - application/json
      description: |-
        Returns true if the user fulfills the requirements to review the branch
        Returns false if user is unauthorized to review the branch
      parameters:
      - description: branch ID
        in: path
        name: branchID
        required: true
        type: string
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns whether the user is allowed to review this branch
      tags:
      - branches
  /branches/{branchID}/review-statuses:
    get:
      consumes:
      - application/json
      description: Returns an array of the statuses of all the reviews of this branch
      parameters:
      - description: branch ID
        in: path
        name: branchID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BranchOverallReviewStatus'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns status of all branch reviews
      tags:
      - branches
  /branches/{branchID}/reviews:
    post:
      consumes:
      - application/json
      description: Adds a review to a branch
      parameters:
      - description: branch ID
        in: path
        name: branchID
        required: true
        type: string
      - description: review creation form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ReviewCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Adds a review to a branch
      tags:
      - branches
  /branches/collaborators/{collaboratorID}:
    get:
      consumes:
      - application/json
      description: Get a branch collaborator by ID, a member who has collaborated
        on a branch
      parameters:
      - description: Collaborator ID
        in: path
        name: collaboratorID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BranchCollaboratorDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get a branch collaborator by ID
      tags:
      - branches
  /branches/reviews/{reviewID}:
    get:
      consumes:
      - application/json
      description: Returns a review of a branch with the given ID
      parameters:
      - description: review ID
        in: path
        name: reviewID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BranchReviewDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns a branch review by ID
      tags:
      - branches
  /discussion-containers/{discussionContainerID}:
    get:
      consumes:
      - application/json
      description: Get a discussion container by its ID, to access its discussions
      parameters:
      - description: Discussion Container ID
        in: path
        name: discussionContainerID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DiscussionContainerDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get discussion container
      tags:
      - discussion-containers
  /discussions/{discussionID}:
    delete:
      consumes:
      - application/json
      description: Delete a discussion with given ID from database
      parameters:
      - description: discussion ID
        in: path
        name: discussionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete a discussion
      tags:
      - discussions
    get:
      consumes:
      - application/json
      description: Get a discussion by discussion ID
      parameters:
      - description: Discussion ID
        in: path
        name: discussionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DiscussionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get discussion
      tags:
      - discussions
  /discussions/{discussionID}/reports:
    get:
      consumes:
      - application/json
      description: Get all reports that have been added to this discussion
      parameters:
      - description: Discussion ID
        in: path
        name: discussionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all reports of this discussion
      tags:
      - discussions
    post:
      consumes:
      - application/json
      description: Create a new report for a discussion
      parameters:
      - description: Report Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ReportCreationForm'
      - description: Discussion ID
        in: path
        name: discussionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReportDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Add a new report to a discussion
      tags:
      - discussions
  /discussions/replies:
    post:
      consumes:
      - application/json
      description: Create a new reply-type discussion, so a discussion that is a child
        of another discussion.
      parameters:
      - description: Reply Discussion Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ReplyDiscussionCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DiscussionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new reply discussion
      tags:
      - discussions
  /discussions/reports/{reportID}:
    get:
      description: Gets a discussion report by its ID
      parameters:
      - description: Report ID
        in: path
        name: reportID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reports.DiscussionReportDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Gets a discussion report by ID
      tags:
      - discussions
  /discussions/roots:
    post:
      consumes:
      - application/json
      description: Create a new root-level discussion, meaning a discussion that is
        not a reply.
      parameters:
      - description: Root Discussion Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.RootDiscussionCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DiscussionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new root discussion
      tags:
      - discussions
  /filter/posts:
    get:
      consumes:
      - application/json
      description: |-
        Returns all post IDs that meet the requirements in the form
        Endpoint is offset-paginated
      parameters:
      - description: Filter form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.FilterForm'
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Filters all posts
      tags:
      - filtering
  /filter/project-posts:
    get:
      consumes:
      - application/json
      description: |-
        Returns all project post IDs that meet the requirements in the form
        Endpoint is offset-paginated
      parameters:
      - description: Filter form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.FilterForm'
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Filters all project posts
      tags:
      - filtering
  /members:
    get:
      description: Get the ID of every member in the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get IDs of all members
      tags:
      - members
    post:
      consumes:
      - application/json
      description: Create a new member from the given fields
      parameters:
      - description: Member Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.MemberCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MemberDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create a new member
      tags:
      - members
    put:
      consumes:
      - application/json
      description: Update the fields of a member
      parameters:
      - description: Updated member
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/models.MemberDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update a member
      tags:
      - members
  /members/{userID}:
    delete:
      consumes:
      - application/json
      description: Delete a member with given ID from database
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete a member
      tags:
      - members
    get:
      consumes:
      - application/json
      description: Get a member by user ID
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MemberDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get member from database
      tags:
      - members
  /members/{userID}/branches:
    get:
      consumes:
      - application/json
      description: Get all branches that this member is a collaborator of
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all branches of this member
      tags:
      - members
  /members/{userID}/discussions:
    get:
      consumes:
      - application/json
      description: Get all discussions that this member has participated in
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all discussions
      tags:
      - members
  /members/{userID}/posts:
    get:
      consumes:
      - application/json
      description: Get all posts that this member is a collaborator of
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all posts of this member
      tags:
      - members
  /members/{userID}/project-posts:
    get:
      consumes:
      - application/json
      description: Get all project posts that this member is a collaborator of
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all project posts of this member
      tags:
      - members
  /members/{userID}/saved-posts:
    get:
      consumes:
      - application/json
      description: Get all posts that this member has saved
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all saved posts of this member
      tags:
      - members
  /members/{userID}/saved-posts/{postID}:
    post:
      consumes:
      - application/json
      description: Adds a post to the saved posts of a member
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Adds new saved post
      tags:
      - members
  /members/{userID}/saved-project-posts:
    get:
      consumes:
      - application/json
      description: Get all project posts that this member has saved
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all saved project posts of this member
      tags:
      - members
  /members/{userID}/saved-project-posts/{postID}:
    post:
      consumes:
      - application/json
      description: Adds a project post to the saved project posts of a member
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Adds new saved project post
      tags:
      - members
  /posts:
    post:
      consumes:
      - application/json
      description: Create a new question or discussion post. Cannot be a project post.
      parameters:
      - description: Post Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.PostCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new post
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update any number of aspects of a question or discussion post
      parameters:
      - description: Updated Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.PostDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update post
      tags:
      - posts
  /posts/{postID}:
    delete:
      consumes:
      - application/json
      description: Delete a post with given ID from database
      parameters:
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Get a post by ID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get post by ID
      tags:
      - posts
  /posts/{postID}/reports:
    get:
      consumes:
      - application/json
      description: Get all reports that have been added to this post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all reports of this post
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new report for a post
      parameters:
      - description: Report Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ReportCreationForm'
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReportDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Add a new report to a post
      tags:
      - posts
  /posts/collaborators/{collaboratorID}:
    get:
      consumes:
      - application/json
      description: Get a post collaborator by ID, a member who has collaborated on
        a post
      parameters:
      - description: Collaborator ID
        in: path
        name: collaboratorID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostCollaboratorDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get a post collaborator by ID
      tags:
      - posts
  /posts/from-github:
    post:
      consumes:
      - application/json
      description: |-
        Create a new question or discussion post
        Creates a post in the same way as CreatePost
        However, the post files are imported from the given Github repository
      parameters:
      - description: Post Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.PostCreationForm'
      - description: Github repository url
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new post with the version imported from github
      tags:
      - posts
  /posts/reports/{reportID}:
    get:
      description: Gets a post report by its ID
      parameters:
      - description: Report ID
        in: path
        name: reportID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reports.PostReportDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Gets a post report by ID
      tags:
      - posts
  /project-posts:
    post:
      consumes:
      - application/json
      description: Create a new project post
      parameters:
      - description: Project Post Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ProjectPostCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectPostDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new project post
      tags:
      - project-posts
    put:
      consumes:
      - application/json
      description: Update any number of the aspects of a project post
      parameters:
      - description: Updated Project Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.ProjectPostDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update project post
      tags:
      - project-posts
  /project-posts/{postID}:
    delete:
      consumes:
      - application/json
      description: Delete a project post with given ID from database
      parameters:
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete a project post
      tags:
      - project-posts
    get:
      consumes:
      - application/json
      description: Get a project post by ID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectPostDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get project post
      tags:
      - project-posts
  /project-posts/{postID}/all-discussions:
    get:
      consumes:
      - application/json
      description: Returns all discussion IDs on this project post over all its previous
        versions, instead of only the current version
      parameters:
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns all discussion IDs associated with the project post
      tags:
      - project-posts
  /project-posts/{postID}/branches-by-status:
    get:
      consumes:
      - application/json
      description: Returns all MR IDs of this project post, grouped by each MR's review
        status
      parameters:
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/forms.GroupedBranchForm'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns MR IDs grouped by each MR status
      tags:
      - project-posts
  /project-posts/from-github:
    post:
      consumes:
      - application/json
      description: |-
        Create a new project post
        Creates a project post in the same way as CreateProjectPost
        However, the post files are imported from the given Github repository
      parameters:
      - description: Post Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ProjectPostCreationForm'
      - description: Github repository url
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectPostDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new project post with the version imported from github
      tags:
      - project-posts
  /tags/completion-status:
    get:
      description: Returns every possible completion status that a Post can have
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProjectCompletionStatus'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns all completion statuses
      tags:
      - tags
  /tags/feedback-preference:
    get:
      description: Returns every possible feedback preference that a Project Post
        can have
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProjectFeedbackPreference'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns all feedback preferences
      tags:
      - tags
  /tags/post-type:
    get:
      description: Returns every possible post type that a Post can have
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PostType'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns all post types
      tags:
      - tags
  /tags/scientific:
    get:
      description: Returns all scientific tags (an array of strings) in the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/tags.ScientificFieldTag'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns all scientific tags
      tags:
      - tags
swagger: "2.0"
