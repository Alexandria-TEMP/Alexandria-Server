basePath: /api/v2
definitions:
  forms.BranchCreationForm:
    properties:
      anonymous:
        type: boolean
      branchTitle:
        type: string
      collaboratingMemberIDs:
        description: The branch's metadata
        items:
          type: integer
        type: array
      projectPostID:
        type: integer
      updatedCompletionStatus:
        $ref: '#/definitions/models.ProjectCompletionStatus'
      updatedFeedbackPreferences:
        $ref: '#/definitions/models.ProjectFeedbackPreference'
      updatedPostTitle:
        description: Changes made by the branch
        type: string
      updatedScientificFieldIDs:
        items:
          type: integer
        type: array
    type: object
  forms.DiscussionCreationForm:
    properties:
      anonymous:
        description: If anonymous, the discussion will ignore member ID
        type: boolean
      memberID:
        type: integer
      text:
        type: string
    type: object
  forms.GroupedBranchForm:
    properties:
      openForReviewIDs:
        items:
          type: integer
        type: array
      peerReviewedIDs:
        items:
          type: integer
        type: array
      rejectedIDs:
        items:
          type: integer
        type: array
    type: object
  forms.MemberCreationForm:
    properties:
      email:
        type: string
      firstName:
        type: string
      institution:
        type: string
      lastName:
        type: string
      password:
        description: |-
          making the password just a string for now
          TODO: some hashing or semblance of security
        type: string
      scientificFieldTagIDs:
        items:
          type: integer
        type: array
    type: object
  forms.PostCreationForm:
    properties:
      anonymous:
        type: boolean
      authorMemberIDs:
        items:
          type: integer
        type: array
      postType:
        $ref: '#/definitions/models.PostType'
      scientificFieldTagIDs:
        items:
          type: integer
        type: array
      title:
        type: string
    type: object
  forms.PostFilterForm:
    properties:
      includeProjectPosts:
        type: boolean
    type: object
  forms.ProjectPostCreationForm:
    properties:
      postCreationForm:
        $ref: '#/definitions/forms.PostCreationForm'
      projectCompletionStatus:
        $ref: '#/definitions/models.ProjectCompletionStatus'
      projectFeedbackPreference:
        $ref: '#/definitions/models.ProjectFeedbackPreference'
    type: object
  forms.ProjectPostFilterForm:
    type: object
  forms.ReplyDiscussionCreationForm:
    properties:
      discussion:
        $ref: '#/definitions/forms.DiscussionCreationForm'
      parentID:
        description: The Discussion this Discussion will be added to
        type: integer
    type: object
  forms.ReportCreationForm:
    type: object
  forms.ReviewCreationForm:
    properties:
      branchID:
        type: integer
      branchReviewDecision:
        $ref: '#/definitions/models.BranchReviewDecision'
      feedback:
        type: string
      reviewingMemberID:
        type: integer
    type: object
  forms.RootDiscussionCreationForm:
    properties:
      containerID:
        description: The DiscussionContainer this Discussion will be added to
        type: integer
      discussion:
        $ref: '#/definitions/forms.DiscussionCreationForm'
    type: object
  models.BranchCollaboratorDTO:
    properties:
      branchID:
        type: integer
      id:
        type: integer
      memberID:
        type: integer
    type: object
  models.BranchDTO:
    properties:
      UpdatedPostTitle:
        description: MR's proposed changes
        type: string
      branchOverallReviewStatus:
        $ref: '#/definitions/models.BranchOverallReviewStatus'
      branchTitle:
        type: string
      collaboratorIDs:
        description: MR metadata
        items:
          type: integer
        type: array
      discussionIDs:
        items:
          type: integer
        type: array
      id:
        type: integer
      projectPostID:
        type: integer
      renderStatus:
        $ref: '#/definitions/models.RenderStatus'
      reviewIDs:
        items:
          type: integer
        type: array
      updatedCompletionStatus:
        $ref: '#/definitions/models.ProjectCompletionStatus'
      updatedScientificFieldTagIDs:
        items:
          type: integer
        type: array
    type: object
  models.BranchOverallReviewStatus:
    enum:
    - open for review
    - peer reviewed
    - rejected
    type: string
    x-enum-varnames:
    - BranchOpenForReview
    - BranchPeerReviewed
    - BranchRejected
  models.BranchReviewDTO:
    properties:
      branchID:
        type: integer
      branchReviewDecision:
        $ref: '#/definitions/models.BranchReviewDecision'
      createdAt:
        type: string
      feedback:
        type: string
      id:
        type: integer
      memberID:
        type: integer
    type: object
  models.BranchReviewDecision:
    enum:
    - rejected
    - approved
    type: string
    x-enum-varnames:
    - Rejected
    - Approved
  models.ClosedBranchDTO:
    properties:
      branchID:
        type: integer
      branchReviewDecision:
        $ref: '#/definitions/models.BranchReviewDecision'
      id:
        type: integer
      projectPostID:
        type: integer
      supercededBranchID:
        type: integer
    type: object
  models.CollaborationType:
    enum:
    - author
    - contributor
    - reviewer
    type: string
    x-enum-varnames:
    - Author
    - Contributor
    - Reviewer
  models.DiscussionContainerDTO:
    properties:
      discussionIDs:
        items:
          type: integer
        type: array
      id:
        type: integer
    type: object
  models.DiscussionDTO:
    properties:
      id:
        type: integer
      memberID:
        type: integer
      replyIDs:
        items:
          type: integer
        type: array
      text:
        type: string
    type: object
  models.MemberDTO:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      institution:
        type: string
      lastName:
        type: string
      password:
        type: string
      scientificFieldTagIDs:
        items:
          type: integer
        type: array
    type: object
  models.MemberShortFormDTO:
    properties:
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
    type: object
  models.PostCollaboratorDTO:
    properties:
      collaborationType:
        $ref: '#/definitions/models.CollaborationType'
      id:
        type: integer
      memberID:
        type: integer
      postID:
        type: integer
    type: object
  models.PostDTO:
    properties:
      collaboratorIDs:
        items:
          type: integer
        type: array
      discussionIDs:
        items:
          type: integer
        type: array
      id:
        type: integer
      postType:
        $ref: '#/definitions/models.PostType'
      renderStatus:
        $ref: '#/definitions/models.RenderStatus'
      scientificFieldTagIDs:
        items:
          type: integer
        type: array
      title:
        type: string
    type: object
  models.PostType:
    enum:
    - project
    - question
    - reflection
    type: string
    x-enum-varnames:
    - Project
    - Question
    - Reflection
  models.ProjectCompletionStatus:
    enum:
    - idea
    - ongoing
    - completed
    type: string
    x-enum-varnames:
    - Idea
    - Ongoing
    - Completed
  models.ProjectFeedbackPreference:
    enum:
    - discussion feedback
    - formal feedback
    type: string
    x-enum-varnames:
    - DiscussionFeedback
    - FormalFeedback
  models.ProjectPostDTO:
    properties:
      closedBranchIDs:
        items:
          type: integer
        type: array
      id:
        type: integer
      openBranchIDs:
        items:
          type: integer
        type: array
      postID:
        type: integer
      postReviewStatus:
        $ref: '#/definitions/models.ProjectReviewStatus'
      projectCompletionStatus:
        $ref: '#/definitions/models.ProjectCompletionStatus'
      projectFeedbackPreference:
        $ref: '#/definitions/models.ProjectFeedbackPreference'
    type: object
  models.ProjectReviewStatus:
    enum:
    - open
    - revision needed
    - reviewed
    type: string
    x-enum-varnames:
    - Open
    - RevisionNeeded
    - Reviewed
  models.RenderStatus:
    enum:
    - success
    - pending
    - failure
    type: string
    x-enum-varnames:
    - Success
    - Pending
    - Failure
  models.ReportDTO:
    type: object
  models.ScientificFieldTagDTO:
    properties:
      id:
        type: integer
      parentID:
        type: integer
      scientificField:
        type: string
      subtagIDs:
        items:
          type: integer
        type: array
    type: object
  reports.DiscussionReportDTO:
    properties:
      discussionID:
        type: integer
    type: object
  reports.PostReportDTO:
    properties:
      postID:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API of Alexandria.
  title: Alexandria API
  version: "2.0"
paths:
  /branches:
    post:
      consumes:
      - application/json
      description: |-
        Create a new branch linked to a project post.
        Note that Member IDs passed here, get converted to Collaborator IDs.
      parameters:
      - description: Branch Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.BranchCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BranchDTO'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Create new branch
      tags:
      - branches
    put:
      consumes:
      - application/json
      description: Update any number of the aspects of a branch
      parameters:
      - description: Updated Branch
        in: body
        name: branch
        required: true
        schema:
          $ref: '#/definitions/models.BranchDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Update branch
      tags:
      - branches
  /branches/{branchID}:
    delete:
      consumes:
      - application/json
      description: Delete a branch with given ID from database
      parameters:
      - description: branch ID
        in: path
        name: branchID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete a branch
      tags:
      - branches
    get:
      consumes:
      - application/json
      description: Get a branch by branch ID
      parameters:
      - description: Branch ID
        in: path
        name: branchID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BranchDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get branch
      tags:
      - branches
  /branches/{branchID}/can-review/{memberID}:
    get:
      consumes:
      - application/json
      description: |-
        Returns true if the user fulfills the requirements to branchreview the branch
        Returns false if user is unauthorized to branchreview the branch
      parameters:
      - description: branch ID
        in: path
        name: branchID
        required: true
        type: string
      - description: member ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Returns whether the user is allowed to branchreview this branch
      tags:
      - branches
  /branches/{branchID}/discussions:
    get:
      description: |-
        Returns all discussions on this version that are not a reply to another discussion
        Endpoint is offset-paginated
      parameters:
      - description: Branch ID
        in: path
        name: branchID
        required: true
        type: string
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DiscussionDTO'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Returns all level 1 discussions associated with the version
      tags:
      - branches
  /branches/{branchID}/file/{filepath}:
    get:
      description: Get the contents of a single file from a project of a branch
      parameters:
      - description: Branch ID
        in: path
        name: branchID
        required: true
        type: string
      - description: Filepath
        in: path
        name: filepath
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get a file from a project
      tags:
      - branches
  /branches/{branchID}/render:
    get:
      description: Get the render of the repository underlying a branch if it exists
        and has been rendered successfully
      parameters:
      - description: Branch ID
        in: path
        name: branchID
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "202":
          description: Accepted
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get the render of a branch
      tags:
      - branches
  /branches/{branchID}/repository:
    get:
      description: Get the entire zipped repository of a branch
      parameters:
      - description: Branch ID
        in: path
        name: branchID
        required: true
        type: string
      produces:
      - application/zip
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get the repository of a branch
      tags:
      - branches
  /branches/{branchID}/review-statuses:
    get:
      consumes:
      - application/json
      description: Returns an array of the statuses of all the reviews of this branch
      parameters:
      - description: branch ID
        in: path
        name: branchID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BranchOverallReviewStatus'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Returns status of all branch reviews
      tags:
      - branches
  /branches/{branchID}/tree:
    get:
      description: Get the filetree of a project of a branch
      parameters:
      - description: Branch ID
        in: path
        name: branchID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get the filetree of a project
      tags:
      - branches
  /branches/{branchID}/upload:
    post:
      consumes:
      - multipart/form-data
      description: |-
        Upload a new project version to a specific, preexisting, branch as a zipped quarto project.
        Specifically, this zip should contain all of the contents of the project at its root, not in a subdirectory.
        Call this after you create a post, and supply it with the actual post contents.
      parameters:
      - description: Branch ID
        in: path
        name: branchID
        required: true
        type: string
      - description: Repository to create
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Upload a new project version to a branch
      tags:
      - branches
  /branches/closed/{closedBranchID}:
    get:
      description: Returns a closed branch given an id
      parameters:
      - description: Closed Branch ID
        in: path
        name: closedBranchID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ClosedBranchDTO'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Returns a closed branch
      tags:
      - branches
  /branches/collaborators/{collaboratorID}:
    get:
      consumes:
      - application/json
      description: Get a branch collaborator by ID, a member who has collaborated
        on a branch
      parameters:
      - description: Collaborator ID
        in: path
        name: collaboratorID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BranchCollaboratorDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get a branch collaborator by ID
      tags:
      - branches
  /branches/reviews:
    post:
      consumes:
      - application/json
      description: Adds a branchreview to a branch
      parameters:
      - description: branchreview creation form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ReviewCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BranchReviewDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Adds a branchreview to a branch
      tags:
      - branches
  /branches/reviews/{reviewID}:
    get:
      consumes:
      - application/json
      description: Returns a branchreview with given ID
      parameters:
      - description: branchreview ID
        in: path
        name: reviewID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BranchReviewDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Returns a branchreview
      tags:
      - branches
  /discussion-containers/{discussionContainerID}:
    get:
      consumes:
      - application/json
      description: Get a discussion container by its ID, to access its discussions
      parameters:
      - description: Discussion Container ID
        in: path
        name: discussionContainerID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DiscussionContainerDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get discussion container
      tags:
      - discussion-containers
  /discussions/{discussionID}:
    delete:
      consumes:
      - application/json
      description: Delete a discussion with given ID from database
      parameters:
      - description: discussion ID
        in: path
        name: discussionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete a discussion
      tags:
      - discussions
    get:
      consumes:
      - application/json
      description: Get a discussion by discussion ID
      parameters:
      - description: Discussion ID
        in: path
        name: discussionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DiscussionDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get discussion
      tags:
      - discussions
  /discussions/{discussionID}/reports:
    get:
      consumes:
      - application/json
      description: Get all reports that have been added to this discussion
      parameters:
      - description: Discussion ID
        in: path
        name: discussionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get all reports of this discussion
      tags:
      - discussions
    post:
      consumes:
      - application/json
      description: Create a new report for a discussion
      parameters:
      - description: Report Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ReportCreationForm'
      - description: Discussion ID
        in: path
        name: discussionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReportDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Add a new report to a discussion
      tags:
      - discussions
  /discussions/replies:
    post:
      consumes:
      - application/json
      description: Create a new reply-type discussion, so a discussion that is a child
        of another discussion.
      parameters:
      - description: Reply Discussion Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ReplyDiscussionCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DiscussionDTO'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create new reply discussion
      tags:
      - discussions
  /discussions/reports/{reportID}:
    get:
      description: Gets a discussion report by its ID
      parameters:
      - description: Report ID
        in: path
        name: reportID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reports.DiscussionReportDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Gets a discussion report by ID
      tags:
      - discussions
  /discussions/roots:
    post:
      consumes:
      - application/json
      description: Create a new root-level discussion, meaning a discussion that is
        not a reply.
      parameters:
      - description: Root Discussion Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.RootDiscussionCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DiscussionDTO'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create new root discussion
      tags:
      - discussions
  /filter/posts:
    get:
      consumes:
      - application/json
      description: |-
        Returns all post IDs that meet the requirements in the form
        Endpoint is offset-paginated
      parameters:
      - description: Post filter form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.PostFilterForm'
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Filters all posts
      tags:
      - filtering
  /filter/project-posts:
    get:
      consumes:
      - application/json
      description: |-
        Returns all project post IDs that meet the requirements in the form
        Endpoint is offset-paginated
      parameters:
      - description: Project post filter form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ProjectPostFilterForm'
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Filters all project posts
      tags:
      - filtering
  /members:
    get:
      description: Get the ID of every member in the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MemberShortFormDTO'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get IDs of all members
      tags:
      - members
    post:
      consumes:
      - application/json
      description: Create a new member from the given fields
      parameters:
      - description: Member Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.MemberCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MemberDTO'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create a new member
      tags:
      - members
    put:
      consumes:
      - application/json
      description: Update the fields of a member
      parameters:
      - description: Updated member
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/models.MemberDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Update a member
      tags:
      - members
  /members/{memberID}:
    delete:
      consumes:
      - application/json
      description: Delete a member with given ID from database
      parameters:
      - description: member ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete a member
      tags:
      - members
    get:
      consumes:
      - application/json
      description: Get a member by member ID
      parameters:
      - description: member ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MemberDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get member from database
      tags:
      - members
  /members/{memberID}/branches:
    get:
      consumes:
      - application/json
      description: Get all branches that this member is a collaborator of
      parameters:
      - description: member ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get all branches of this member
      tags:
      - members
  /members/{memberID}/discussions:
    get:
      consumes:
      - application/json
      description: Get all discussions that this member has participated in
      parameters:
      - description: member ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get all discussions
      tags:
      - members
  /members/{memberID}/posts:
    get:
      consumes:
      - application/json
      description: Get all posts that this member is a collaborator of
      parameters:
      - description: member ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get all posts of this member
      tags:
      - members
  /members/{memberID}/project-posts:
    get:
      consumes:
      - application/json
      description: Get all project posts that this member is a collaborator of
      parameters:
      - description: member ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get all project posts of this member
      tags:
      - members
  /members/{memberID}/saved-posts:
    get:
      consumes:
      - application/json
      description: Get all posts that this member has saved
      parameters:
      - description: member ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get all saved posts of this member
      tags:
      - members
  /members/{memberID}/saved-posts/{postID}:
    post:
      consumes:
      - application/json
      description: Adds a post to the saved posts of a member
      parameters:
      - description: member ID
        in: path
        name: memberID
        required: true
        type: string
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Adds new saved post
      tags:
      - members
  /members/{memberID}/saved-project-posts:
    get:
      consumes:
      - application/json
      description: Get all project posts that this member has saved
      parameters:
      - description: member ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get all saved project posts of this member
      tags:
      - members
  /members/{memberID}/saved-project-posts/{postID}:
    post:
      consumes:
      - application/json
      description: Adds a project post to the saved project posts of a member
      parameters:
      - description: member ID
        in: path
        name: memberID
        required: true
        type: string
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Adds new saved project post
      tags:
      - members
  /posts:
    post:
      consumes:
      - application/json
      description: Create a new question or discussion post. Cannot be a project post.
      parameters:
      - description: Post Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.PostCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostDTO'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create new post
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update any number of aspects of a question or discussion post
      parameters:
      - description: Updated Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.PostDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Update post
      tags:
      - posts
  /posts/{postID}:
    delete:
      consumes:
      - application/json
      description: Delete a post with given ID from database
      parameters:
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Get a post by ID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get post by ID
      tags:
      - posts
  /posts/{postID}/file/{filepath}:
    get:
      description: Get the contents of a single file from the main version of a post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      - description: Filepath
        in: path
        name: filepath
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get a file from a post
      tags:
      - posts
  /posts/{postID}/render:
    get:
      description: Get the main render of the repository underlying a post if it exists
        and has been rendered successfully
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "202":
          description: Accepted
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get the main render of a post
      tags:
      - posts
  /posts/{postID}/reports:
    get:
      consumes:
      - application/json
      description: Get all reports that have been added to this post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get all reports of this post
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new report for a post
      parameters:
      - description: Report Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ReportCreationForm'
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReportDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Add a new report to a post
      tags:
      - posts
  /posts/{postID}/repository:
    get:
      description: Get the entire zipped main repository of a post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/zip
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get the main repository of a post
      tags:
      - posts
  /posts/{postID}/tree:
    get:
      description: |-
        Get the filetree of a the main version of a post, together with the size of the file in bytes.
        Directories have a size of -1.
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get the filetree of a post
      tags:
      - posts
  /posts/{postID}/upload:
    post:
      consumes:
      - multipart/form-data
      description: |-
        Upload a zipped quarto project to a post. This is the main version of the post, as there are no other versions.
        Specifically, this zip should contain all of the contents of the project at its root, not in a subdirectory.
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      - description: Repository to create
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Upload a new project version to a branch
      tags:
      - posts
  /posts/collaborators/{collaboratorID}:
    get:
      consumes:
      - application/json
      description: Get a post collaborator by ID, a member who has collaborated on
        a post
      parameters:
      - description: Collaborator ID
        in: path
        name: collaboratorID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostCollaboratorDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get a post collaborator by ID
      tags:
      - posts
  /posts/from-github:
    post:
      consumes:
      - application/json
      description: |-
        Create a new question or discussion post
        Creates a post in the same way as CreatePost
        However, the post files are imported from the given Github repository
      parameters:
      - description: Post Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.PostCreationForm'
      - description: Github repository url
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostDTO'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Create new post with the version imported from github
      tags:
      - posts
  /posts/reports/{reportID}:
    get:
      description: Gets a post report by its ID
      parameters:
      - description: Report ID
        in: path
        name: reportID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reports.PostReportDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Gets a post report by ID
      tags:
      - posts
  /project-posts:
    post:
      consumes:
      - application/json
      description: Create a new project post with a single open branch. Upload to
        this branch in order to have your post reviewed.
      parameters:
      - description: Project Post Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ProjectPostCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectPostDTO'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create new project post
      tags:
      - project-posts
    put:
      consumes:
      - application/json
      description: Update any number of the aspects of a project post
      parameters:
      - description: Updated Project Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.ProjectPostDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Update project post
      tags:
      - project-posts
  /project-posts/{projectPostID}:
    delete:
      consumes:
      - application/json
      description: Delete a project post with given ID from database
      parameters:
      - description: post ID
        in: path
        name: projectPostID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete a project post
      tags:
      - project-posts
    get:
      consumes:
      - application/json
      description: Get a project post by ID
      parameters:
      - description: Post ID
        in: path
        name: projectPostID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectPostDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get project post
      tags:
      - project-posts
  /project-posts/{projectPostID}/all-discussions:
    get:
      consumes:
      - application/json
      description: Returns all discussion IDs on this project post over all its previous
        versions, instead of only the current version
      parameters:
      - description: post ID
        in: path
        name: projectPostID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Returns all discussion IDs associated with the project post
      tags:
      - project-posts
  /project-posts/{projectPostID}/branches-by-status:
    get:
      consumes:
      - application/json
      description: Returns all branch IDs of this project post, grouped by each branch's
        branchreview status
      parameters:
      - description: post ID
        in: path
        name: projectPostID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/forms.GroupedBranchForm'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Returns branch IDs grouped by each branch status
      tags:
      - project-posts
  /project-posts/from-github:
    post:
      consumes:
      - application/json
      description: |-
        Create a new project post
        Creates a project post in the same way as CreateProjectPost
        However, the post files are imported from the given Github repository
      parameters:
      - description: Post Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ProjectPostCreationForm'
      - description: Github repository url
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectPostDTO'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Create new project post with the version imported from github
      tags:
      - project-posts
  /tags/completion-status:
    get:
      description: Returns every possible completion status that a Post can have
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProjectCompletionStatus'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Returns all completion statuses
      tags:
      - tags
  /tags/feedback-preference:
    get:
      description: Returns every possible feedback preference that a Project Post
        can have
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProjectFeedbackPreference'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Returns all feedback preferences
      tags:
      - tags
  /tags/post-type:
    get:
      description: Returns every possible post type that a Post can have
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PostType'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Returns all post types
      tags:
      - tags
  /tags/scientific:
    get:
      description: Returns all scientific tags in the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ScientificFieldTagDTO'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Returns all scientific tags
      tags:
      - tags
  /tags/scientific/:tagID:
    get:
      consumes:
      - application/json
      description: Get a scientific field tag by tag ID
      parameters:
      - description: tag ID
        in: path
        name: tagID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ScientificFieldTagDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get scientific field tag from database
      tags:
      - tags
swagger: "2.0"
