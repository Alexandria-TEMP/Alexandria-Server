basePath: /api/v2
definitions:
  forms.DiscussionCreationForm:
<<<<<<< HEAD
    properties:
      anonymous:
        description: If anonymous, the discussion will ignore member ID
        type: boolean
      memberID:
        type: integer
      text:
        type: string
    type: object
  forms.FilterForm:
    type: object
  forms.GroupedMergeRequestForm:
    properties:
      openForReviewIDs:
        items:
          type: integer
        type: array
      peerReviewedIDs:
        items:
          type: integer
        type: array
      rejectedIDs:
        items:
          type: integer
        type: array
    type: object
  forms.IncomingFileForm:
    type: object
=======
    type: object
  forms.FilterForm:
    type: object
>>>>>>> main
  forms.MemberCreationForm:
    properties:
      email:
        type: string
<<<<<<< HEAD
      fields:
        items:
          $ref: '#/definitions/tags.ScientificFieldTag'
        type: array
=======
>>>>>>> main
      firstName:
        type: string
      institution:
        type: string
      lastName:
        type: string
      password:
        description: |-
          making the password just a string for now
          TODO: some hashing or semblance of security
        type: string
    type: object
  forms.MergeRequestCreationForm:
<<<<<<< HEAD
    properties:
      anonymous:
        type: boolean
      collaboratingMemberIDs:
        description: The MR's metadata
        items:
          type: integer
        type: array
      mergeRequestTitle:
        type: string
      projectPostID:
        type: integer
      updatedCompletionStatus:
        $ref: '#/definitions/tags.CompletionStatus'
      updatedFeedbackPreferences:
        $ref: '#/definitions/tags.FeedbackPreference'
      updatedPostTitle:
        description: Changes made by the MR
        type: string
      updatedScientificFields:
        items:
          $ref: '#/definitions/tags.ScientificField'
        type: array
    type: object
  forms.PostCreationForm:
    properties:
      anonymous:
        type: boolean
      authorMemberIDs:
        description: Members that are authors of the post
        items:
          type: integer
        type: array
      postType:
        $ref: '#/definitions/tags.PostType'
      scientificFieldTags:
        items:
          $ref: '#/definitions/tags.ScientificField'
        type: array
      title:
        type: string
    type: object
  forms.ProjectPostCreationForm:
    properties:
      completionStatus:
        $ref: '#/definitions/tags.CompletionStatus'
      feedbackPreference:
        $ref: '#/definitions/tags.FeedbackPreference'
      postCreationForm:
        $ref: '#/definitions/forms.PostCreationForm'
=======
    type: object
  forms.PostCreationForm:
    properties:
      collaborators:
        items:
          type: integer
        type: array
    type: object
  forms.ProjectPostCreationForm:
    properties:
      postCreationForm:
        allOf:
        - $ref: '#/definitions/forms.PostCreationForm'
        description: TODO add fields
>>>>>>> main
    type: object
  forms.ReportCreationForm:
    type: object
  forms.ReviewCreationForm:
<<<<<<< HEAD
    properties:
      feedback:
        type: string
      mergeRequestDecision:
        $ref: '#/definitions/models.MergeRequestReviewDecision'
      reviewingMemberID:
        type: integer
    type: object
  models.CollaborationType:
    enum:
    - author
    - contributor
    - reviewer
    type: string
    x-enum-varnames:
    - Author
    - Contributor
    - Reviewer
=======
    type: object
>>>>>>> main
  models.DiscussionDTO:
    properties:
      anonymous:
        type: boolean
      deleted:
        type: boolean
      id:
        type: integer
      memberID:
        type: integer
      replyIDs:
        items:
          type: integer
        type: array
      text:
        type: string
      versionID:
        type: integer
    type: object
<<<<<<< HEAD
=======
  models.Member:
    type: object
>>>>>>> main
  models.MemberDTO:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      institution:
        type: string
      lastName:
        type: string
      password:
        type: string
      scientificFieldTags:
        items:
          $ref: '#/definitions/tags.ScientificField'
        type: array
    type: object
<<<<<<< HEAD
  models.MergeRequestCollaboratorDTO:
    properties:
      id:
        type: integer
      memberID:
        type: integer
      mergeRequestID:
        type: integer
    type: object
=======
>>>>>>> main
  models.MergeRequestDTO:
    properties:
      anonymous:
        type: boolean
      collaboratorIDs:
        description: MR metadata
        items:
          type: integer
        type: array
<<<<<<< HEAD
      createdAt:
        type: string
      id:
        type: integer
      mergeRequestDecision:
        $ref: '#/definitions/models.MergeRequestReviewStatus'
=======
      id:
        type: integer
>>>>>>> main
      mergeRequestTitle:
        type: string
      newPostTitle:
        type: string
      newVersionID:
        description: MR's proposed changes
        type: integer
      previousVersionID:
        type: integer
      projectPostID:
        type: integer
      reviewIDs:
        items:
          type: integer
        type: array
<<<<<<< HEAD
      updatedAt:
        type: string
=======
>>>>>>> main
      updatedCompletionStatus:
        $ref: '#/definitions/tags.CompletionStatus'
      updatedScientificFields:
        items:
          $ref: '#/definitions/tags.ScientificField'
        type: array
    type: object
<<<<<<< HEAD
  models.MergeRequestReviewDTO:
    properties:
      createdAt:
        type: string
      feedback:
        type: string
      id:
        type: integer
      memberID:
        type: integer
      mergeRequestDecision:
        $ref: '#/definitions/models.MergeRequestReviewDecision'
      mergeRequestID:
        type: integer
    type: object
  models.MergeRequestReviewDecision:
    enum:
    - rejected
    - approved
    type: string
    x-enum-varnames:
    - ReviewRejected
    - ReviewApproved
  models.MergeRequestReviewStatus:
    enum:
    - open for review
    - peer reviewed
    - rejected
    type: string
    x-enum-varnames:
    - MergeRequestOpenForReview
    - MergeRequestPeerReviewed
    - MergeRequestRejected
  models.PostCollaboratorDTO:
    properties:
      collaborationType:
        $ref: '#/definitions/models.CollaborationType'
      id:
        type: integer
      memberID:
        type: integer
      postID:
        type: integer
    type: object
  models.PostDTO:
    properties:
      anonymous:
        type: boolean
=======
  models.PostDTO:
    properties:
>>>>>>> main
      collaboratorIDs:
        items:
          type: integer
        type: array
      id:
        type: integer
      postType:
        $ref: '#/definitions/tags.PostType'
      scientificFieldTags:
        items:
          $ref: '#/definitions/tags.ScientificField'
        type: array
      title:
        type: string
      versionID:
        type: integer
    type: object
  models.ProjectPostDTO:
    properties:
      closedMergeRequestIDs:
        items:
          type: integer
        type: array
      completionStatus:
        $ref: '#/definitions/tags.CompletionStatus'
      feedbackPreference:
        $ref: '#/definitions/tags.FeedbackPreference'
      id:
        type: integer
      openMergeRequestIDs:
        items:
          type: integer
        type: array
      postDTO:
        $ref: '#/definitions/models.PostDTO'
      postReviewStatusTag:
        $ref: '#/definitions/tags.PostReviewStatus'
    type: object
  models.RenderStatus:
    enum:
    - success
    - pending
    - failure
    type: string
    x-enum-varnames:
<<<<<<< HEAD
    - RenderSuccess
    - RenderPending
    - RenderFailure
  models.ReportDTO:
    type: object
=======
    - Success
    - Pending
    - Failure
  models.ReportDTO:
    type: object
  models.ReviewDTO:
    type: object
>>>>>>> main
  models.VersionDTO:
    properties:
      discussionIDs:
        items:
          type: integer
        type: array
      id:
        type: integer
      renderStatus:
        $ref: '#/definitions/models.RenderStatus'
    type: object
<<<<<<< HEAD
  reports.DiscussionReportDTO:
    properties:
      discussionID:
        type: integer
    type: object
  reports.PostReportDTO:
    properties:
      postID:
        type: integer
    type: object
=======
>>>>>>> main
  tags.CompletionStatus:
    enum:
    - idea
    - ongoing
    - completed
    type: string
    x-enum-varnames:
    - Idea
    - Ongoing
    - Completed
  tags.FeedbackPreference:
    enum:
    - discussion
    - formal feedback
    type: string
    x-enum-varnames:
    - Discussion
    - FormalFeedback
  tags.PostReviewStatus:
    enum:
    - open
    - revision needed
    - reviewed
    type: string
    x-enum-varnames:
    - Open
    - RevisionNeeded
    - Reviewed
  tags.PostType:
    enum:
    - project
    - question
    - reflection
    type: string
    x-enum-varnames:
    - Project
    - Question
    - Reflection
  tags.ScientificField:
    enum:
    - mathematics
    - computer science
    type: string
    x-enum-varnames:
    - Mathematics
    - ComputerScience
  tags.ScientificFieldTag:
    type: object
  utils.HTTPError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API of Alexandria.
  title: Alexandria API
  version: "2.0"
paths:
  /discussions:
    post:
      consumes:
      - application/json
      description: |-
        Create a new discussion
<<<<<<< HEAD
        Either parent ID or version ID must be specified. This determines whether it's a reply or not, respectively.
=======
        If parent ID field is used, the discussion will be a reply
>>>>>>> main
      parameters:
      - description: Discussion Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.DiscussionCreationForm'
      - description: Parent ID
        in: query
        name: parentID
        type: string
<<<<<<< HEAD
      - description: Version ID
        in: query
        name: versionID
        type: string
=======
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DiscussionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new discussion
<<<<<<< HEAD
      tags:
      - discussions
=======
>>>>>>> main
  /discussions/{discussionID}:
    delete:
      consumes:
      - application/json
      description: Delete a discussion with given ID from database
      parameters:
      - description: discussion ID
        in: path
        name: discussionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete a discussion
<<<<<<< HEAD
      tags:
      - discussions
=======
>>>>>>> main
    get:
      consumes:
      - application/json
      description: Get a discussion by discussion ID
      parameters:
      - description: Discussion ID
        in: path
        name: discussionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DiscussionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get discussion
<<<<<<< HEAD
      tags:
      - discussions
  /discussions/{discussionID}/reports:
    get:
      consumes:
      - application/json
      description: Get all reports that have been added to this discussion
      parameters:
      - description: Discussion ID
=======
  /discussions/{discussionID}/replies:
    get:
      consumes:
      - application/json
      description: |-
        Gets an array of all the first-level replies of a discussion
        Endpoint is offset-paginated
      parameters:
      - description: discussion ID
>>>>>>> main
        in: path
        name: discussionID
        required: true
        type: string
<<<<<<< HEAD
=======
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
<<<<<<< HEAD
              type: integer
=======
              $ref: '#/definitions/models.DiscussionDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all the replies of a discussion
  /discussions/{discussionID}/reports:
    get:
      consumes:
      - application/json
      description: |-
        Get all reports that have been added to this discussion
        Endpoint is offset-paginated
      parameters:
      - description: Discussion ID
        in: path
        name: discussionID
        required: true
        type: string
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ReportDTO'
>>>>>>> main
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all reports of this discussion
<<<<<<< HEAD
      tags:
      - discussions
=======
>>>>>>> main
    post:
      consumes:
      - application/json
      description: Create a new report for a discussion
      parameters:
      - description: Report Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ReportCreationForm'
      - description: Discussion ID
        in: path
        name: discussionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReportDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Add a new report to a discussion
<<<<<<< HEAD
      tags:
      - discussions
  /discussions/reports/{reportID}:
    get:
      description: Gets a discussion report by its ID
      parameters:
      - description: Report ID
        in: path
        name: reportID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reports.DiscussionReportDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Gets a discussion report by ID
      tags:
      - discussions
=======
>>>>>>> main
  /filter/posts:
    get:
      consumes:
      - application/json
      description: |-
<<<<<<< HEAD
        Returns all post IDs that meet the requirements in the form
=======
        Returns all posts that meet the requirements in the form
>>>>>>> main
        Endpoint is offset-paginated
      parameters:
      - description: Filter form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.FilterForm'
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
<<<<<<< HEAD
              type: integer
=======
              $ref: '#/definitions/models.PostDTO'
>>>>>>> main
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Filters all posts
<<<<<<< HEAD
      tags:
      - filtering
=======
>>>>>>> main
  /filter/project-posts:
    get:
      consumes:
      - application/json
      description: |-
<<<<<<< HEAD
        Returns all project post IDs that meet the requirements in the form
=======
        Returns all project posts that meet the requirements in the form
>>>>>>> main
        Endpoint is offset-paginated
      parameters:
      - description: Filter form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.FilterForm'
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
<<<<<<< HEAD
              type: integer
=======
              $ref: '#/definitions/models.ProjectPostDTO'
>>>>>>> main
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Filters all project posts
<<<<<<< HEAD
      tags:
      - filtering
  /members:
    get:
      description: Get the ID of every member in the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get IDs of all members
      tags:
      - members
=======
  /members:
>>>>>>> main
    post:
      consumes:
      - application/json
      description: Create a new member from the given fields
      parameters:
      - description: Member Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.MemberCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MemberDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create a new member
<<<<<<< HEAD
      tags:
      - members
=======
>>>>>>> main
    put:
      consumes:
      - application/json
      description: Update the fields of a member
      parameters:
      - description: Updated member
        in: body
        name: member
        required: true
        schema:
<<<<<<< HEAD
          $ref: '#/definitions/models.MemberDTO'
=======
          $ref: '#/definitions/models.Member'
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update a member
<<<<<<< HEAD
      tags:
      - members
=======
>>>>>>> main
  /members/{userID}:
    delete:
      consumes:
      - application/json
      description: Delete a member with given ID from database
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete a member
<<<<<<< HEAD
      tags:
      - members
=======
>>>>>>> main
    get:
      consumes:
      - application/json
      description: Get a member by user ID
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MemberDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get member from database
<<<<<<< HEAD
      tags:
      - members
=======
>>>>>>> main
  /members/{userID}/discussions:
    get:
      consumes:
      - application/json
<<<<<<< HEAD
      description: Get all discussions that this member has participated in
=======
      description: |-
        Get all merge requests that this member is a collaborator of
        Endpoint is offset-paginated
>>>>>>> main
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
<<<<<<< HEAD
=======
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
<<<<<<< HEAD
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all discussions
      tags:
      - members
  /members/{userID}/merge-requests:
    get:
      consumes:
      - application/json
      description: Get all merge requests that this member is a collaborator of
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
=======
              $ref: '#/definitions/models.DiscussionDTO'
>>>>>>> main
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all merge requests of this member
<<<<<<< HEAD
      tags:
      - members
  /members/{userID}/posts:
    get:
      consumes:
      - application/json
      description: Get all posts that this member is a collaborator of
=======
  /members/{userID}/merge-requests:
    get:
      consumes:
      - application/json
      description: |-
        Get all merge requests that this member is a collaborator of
        Endpoint is offset-paginated
>>>>>>> main
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
<<<<<<< HEAD
=======
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
<<<<<<< HEAD
              type: integer
=======
              $ref: '#/definitions/models.MergeRequestDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all merge requests of this member
  /members/{userID}/posts:
    get:
      consumes:
      - application/json
      description: |-
        Get all posts that this member is a collaborator of
        Endpoint is offset-paginated
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PostDTO'
>>>>>>> main
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all posts of this member
<<<<<<< HEAD
      tags:
      - members
=======
>>>>>>> main
  /members/{userID}/project-posts:
    get:
      consumes:
      - application/json
<<<<<<< HEAD
      description: Get all project posts that this member is a collaborator of
=======
      description: |-
        Get all project posts that this member is a collaborator of
        Endpoint is offset-paginated
>>>>>>> main
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
<<<<<<< HEAD
=======
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
<<<<<<< HEAD
              type: integer
=======
              $ref: '#/definitions/models.ProjectPostDTO'
>>>>>>> main
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all project posts of this member
<<<<<<< HEAD
      tags:
      - members
=======
>>>>>>> main
  /members/{userID}/saved-posts:
    get:
      consumes:
      - application/json
<<<<<<< HEAD
      description: Get all posts that this member has saved
=======
      description: |-
        Get all posts that this member has saved
        Endpoint is offset-paginated
>>>>>>> main
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
<<<<<<< HEAD
=======
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
<<<<<<< HEAD
              type: integer
=======
              $ref: '#/definitions/models.PostDTO'
>>>>>>> main
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all saved posts of this member
<<<<<<< HEAD
      tags:
      - members
=======
>>>>>>> main
  /members/{userID}/saved-posts/{postID}:
    post:
      consumes:
      - application/json
      description: Adds a post to the saved posts of a member
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Adds new saved post
<<<<<<< HEAD
      tags:
      - members
=======
>>>>>>> main
  /members/{userID}/saved-project-posts:
    get:
      consumes:
      - application/json
<<<<<<< HEAD
      description: Get all project posts that this member has saved
=======
      description: |-
        Get all project posts that this member has saved
        Endpoint is offset-paginated
>>>>>>> main
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
<<<<<<< HEAD
=======
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
<<<<<<< HEAD
              type: integer
=======
              $ref: '#/definitions/models.ProjectPostDTO'
>>>>>>> main
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all saved project posts of this member
<<<<<<< HEAD
      tags:
      - members
=======
>>>>>>> main
  /members/{userID}/saved-project-posts/{postID}:
    post:
      consumes:
      - application/json
      description: Adds a project post to the saved project posts of a member
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Adds new saved project post
<<<<<<< HEAD
      tags:
      - members
=======
>>>>>>> main
  /merge-requests:
    post:
      consumes:
      - application/json
<<<<<<< HEAD
      description: |-
        Create a new merge request linked to a project post.
        Note that Member IDs passed here, get converted to Collaborator IDs.
=======
      description: Create a new question or discussion merge request
>>>>>>> main
      parameters:
      - description: MergeRequest Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.MergeRequestCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MergeRequestDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new merge request
<<<<<<< HEAD
      tags:
      - merge-requests
=======
>>>>>>> main
    put:
      consumes:
      - application/json
      description: Update any number of the aspects of a merge request
      parameters:
      - description: Updated MergeRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MergeRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update merge request
<<<<<<< HEAD
      tags:
      - merge-requests
=======
>>>>>>> main
  /merge-requests/{mergeRequestID}:
    delete:
      consumes:
      - application/json
      description: Delete a merge request with given ID from database
      parameters:
      - description: merge request ID
        in: path
        name: mergeRequestID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete a merge request
<<<<<<< HEAD
      tags:
      - merge-requests
=======
>>>>>>> main
    get:
      consumes:
      - application/json
      description: Get a merge request by merge request ID
      parameters:
      - description: MergeRequest ID
        in: path
        name: mergeRequestID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MergeRequestDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get merge request
<<<<<<< HEAD
      tags:
      - merge-requests
=======
>>>>>>> main
  /merge-requests/{mergeRequestID}/can-review/{userID}:
    get:
      consumes:
      - application/json
      description: |-
        Returns true if the user fulfills the requirements to review the merge request
        Returns false if user is unauthorized to review the merge request
      parameters:
      - description: merge request ID
        in: path
        name: mergeRequestID
        required: true
        type: string
      - description: user ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
<<<<<<< HEAD
            type: boolean
=======
            items:
              type: boolean
            type: array
>>>>>>> main
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns whether the user is allowed to review this merge request
<<<<<<< HEAD
      tags:
      - merge-requests
  /merge-requests/{mergeRequestID}/review-statuses:
=======
  /merge-requests/{mergeRequestID}/reviews:
>>>>>>> main
    get:
      consumes:
      - application/json
      description: Returns an array of the statuses of all the reviews of this merge
        request
      parameters:
      - description: merge request ID
        in: path
        name: mergeRequestID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
<<<<<<< HEAD
              $ref: '#/definitions/models.MergeRequestReviewStatus'
=======
              type: string
>>>>>>> main
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns status of all merge request reviews
<<<<<<< HEAD
      tags:
      - merge-requests
  /merge-requests/{mergeRequestID}/reviews:
=======
>>>>>>> main
    post:
      consumes:
      - application/json
      description: Adds a review to a merge request
      parameters:
      - description: merge request ID
        in: path
        name: mergeRequestID
        required: true
        type: string
      - description: review creation form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ReviewCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Adds a review to a merge request
<<<<<<< HEAD
      tags:
      - merge-requests
  /merge-requests/collaborators/{collaboratorID}:
    get:
      consumes:
      - application/json
      description: Get a merge request collaborator by ID, a member who has collaborated
        on a merge request
      parameters:
      - description: Collaborator ID
        in: path
        name: collaboratorID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MergeRequestCollaboratorDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get a merge request collaborator by ID
      tags:
      - merge-requests
  /merge-requests/reviews/{reviewID}:
    get:
      consumes:
      - application/json
      description: Returns a review of a merge request with the given ID
      parameters:
=======
  /merge-requests/{mergeRequestID}/reviews/{reviewID}:
    get:
      consumes:
      - application/json
      description: Returns a review with the given ID of the merge request with the
        given ID
      parameters:
      - description: merge request ID
        in: path
        name: mergeRequestID
        required: true
        type: string
>>>>>>> main
      - description: review ID
        in: path
        name: reviewID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
<<<<<<< HEAD
            $ref: '#/definitions/models.MergeRequestReviewDTO'
=======
            $ref: '#/definitions/models.ReviewDTO'
>>>>>>> main
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
<<<<<<< HEAD
      summary: Returns a merge request review by ID
      tags:
      - merge-requests
=======
      summary: Returns a review of a merge request
>>>>>>> main
  /posts:
    post:
      consumes:
      - application/json
      description: Create a new question or discussion post
      parameters:
      - description: Post Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.PostCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new post
<<<<<<< HEAD
      tags:
      - posts
=======
>>>>>>> main
    put:
      consumes:
      - application/json
      description: Update any number of the aspects of a question or discussion post
      parameters:
      - description: Updated Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.PostDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update post
<<<<<<< HEAD
      tags:
      - posts
=======
>>>>>>> main
  /posts/{postID}:
    delete:
      consumes:
      - application/json
      description: Delete a post with given ID from database
      parameters:
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete a post
<<<<<<< HEAD
      tags:
      - posts
=======
>>>>>>> main
    get:
      consumes:
      - application/json
      description: Get a post by post ID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get post
<<<<<<< HEAD
      tags:
      - posts
=======
>>>>>>> main
  /posts/{postID}/reports:
    get:
      consumes:
      - application/json
<<<<<<< HEAD
      description: Get all reports that have been added to this post
=======
      description: |-
        Get all reports that have been added to this post
        Endpoint is offset-paginated
>>>>>>> main
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
<<<<<<< HEAD
=======
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
<<<<<<< HEAD
              type: integer
=======
              $ref: '#/definitions/models.ReportDTO'
>>>>>>> main
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all reports of this post
<<<<<<< HEAD
      tags:
      - posts
=======
>>>>>>> main
    post:
      consumes:
      - application/json
      description: Create a new report for a post
      parameters:
      - description: Report Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ReportCreationForm'
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReportDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Add a new report to a post
<<<<<<< HEAD
      tags:
      - posts
  /posts/collaborators/{collaboratorID}:
    get:
      consumes:
      - application/json
      description: Get a post collaborator by ID, a member who has collaborated on
        a post
      parameters:
      - description: Collaborator ID
        in: path
        name: collaboratorID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostCollaboratorDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get a post collaborator by ID
      tags:
      - posts
=======
>>>>>>> main
  /posts/from-github:
    post:
      consumes:
      - application/json
      description: |-
        Create a new question or discussion post
        Creates a post in the same way as CreatePost
        However, the post files are imported from the given Github repository
      parameters:
      - description: Post Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.PostCreationForm'
      - description: Github repository url
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new post with the version imported from github
<<<<<<< HEAD
      tags:
      - posts
  /posts/reports/{reportID}:
    get:
      description: Gets a post report by its ID
      parameters:
      - description: Report ID
        in: path
        name: reportID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reports.PostReportDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Gets a post report by ID
      tags:
      - posts
=======
>>>>>>> main
  /project-posts:
    post:
      consumes:
      - application/json
      description: Create a new project post
      parameters:
      - description: Project Post Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ProjectPostCreationForm'
<<<<<<< HEAD
=======
      - description: Parent post ID
        in: query
        name: parentPostID
        type: string
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectPostDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new project post
<<<<<<< HEAD
      tags:
      - project-posts
=======
>>>>>>> main
    put:
      consumes:
      - application/json
      description: Update any number of the aspects of a project post
      parameters:
      - description: Updated Project Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.ProjectPostDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update project post
<<<<<<< HEAD
      tags:
      - project-posts
=======
>>>>>>> main
  /project-posts/{postID}:
    delete:
      consumes:
      - application/json
      description: Delete a project post with given ID from database
      parameters:
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete a project post
<<<<<<< HEAD
      tags:
      - project-posts
=======
>>>>>>> main
    get:
      consumes:
      - application/json
      description: Get a project post by ID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectPostDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get project post
<<<<<<< HEAD
      tags:
      - project-posts
=======
>>>>>>> main
  /project-posts/{postID}/all-discussions:
    get:
      consumes:
      - application/json
<<<<<<< HEAD
      description: Returns all discussion IDs on this project post over all its previous
        versions, instead of only the current version
=======
      description: |-
        Returns all discussions on this project post and all of it's merge requests
        Endpoint is offset-paginated
>>>>>>> main
      parameters:
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
<<<<<<< HEAD
=======
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
<<<<<<< HEAD
              type: integer
=======
              $ref: '#/definitions/models.DiscussionDTO'
>>>>>>> main
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
<<<<<<< HEAD
      summary: Returns all discussion IDs associated with the project post
      tags:
      - project-posts
  /project-posts/{postID}/merge-requests-by-status:
    get:
      consumes:
      - application/json
      description: Returns all MR IDs of this project post, grouped by each MR's review
        status
=======
      summary: Returns all discussions associated with the project post
  /project-posts/{postID}/closed-merge-requests:
    get:
      consumes:
      - application/json
      description: |-
        Get all closed merge requests associated with the given project post
        Endpoint is offset-paginated
>>>>>>> main
      parameters:
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
<<<<<<< HEAD
=======
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
<<<<<<< HEAD
            $ref: '#/definitions/forms.GroupedMergeRequestForm'
=======
            items:
              $ref: '#/definitions/models.MergeRequestDTO'
            type: array
>>>>>>> main
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
<<<<<<< HEAD
      summary: Returns MR IDs grouped by each MR status
      tags:
      - project-posts
=======
      summary: Get all closed merge requests of a project post
  /project-posts/{postID}/open-merge-requests:
    get:
      consumes:
      - application/json
      description: |-
        Get all open merge requests associated with the given project post
        Endpoint is offset-paginated
      parameters:
      - description: post ID
        in: path
        name: postID
        required: true
        type: string
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MergeRequestDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all open merge requests of a project post
>>>>>>> main
  /project-posts/from-github:
    post:
      consumes:
      - application/json
      description: |-
        Create a new project post
        Creates a project post in the same way as CreateProjectPost
        However, the post files are imported from the given Github repository
      parameters:
      - description: Post Creation Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/forms.ProjectPostCreationForm'
      - description: Github repository url
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectPostDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new project post with the version imported from github
<<<<<<< HEAD
      tags:
      - project-posts
  /tags/completion-status:
    get:
      description: Returns every possible completion status that a Post can have
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/tags.CompletionStatus'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns all completion statuses
      tags:
      - tags
  /tags/feedback-preference:
    get:
      description: Returns every possible feedback preference that a Project Post
        can have
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/tags.FeedbackPreference'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns all feedbback preferences
      tags:
      - tags
  /tags/post-type:
    get:
      description: Returns every possible post type that a Post can have
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/tags.PostType'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns all post types
      tags:
      - tags
  /tags/scientific:
    get:
      description: Returns all scientific tags (an array of strings) in the database
=======
  /tags/scientific:
    get:
      description: Returns all scientific tags in the database
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/tags.ScientificFieldTag'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
<<<<<<< HEAD
=======
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
>>>>>>> main
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Returns all scientific tags
<<<<<<< HEAD
      tags:
      - tags
  /versions/{postID}:
    post:
      consumes:
      - multipart/form-data
      description: Create a new version with discussions and repository
      parameters:
      - description: Parent Post ID
        in: query
        name: postID
        required: true
        type: string
      - description: Repository to create
        in: body
        name: repository
        required: true
        schema:
          $ref: '#/definitions/forms.IncomingFileForm'
=======
  /versions:
    post:
      consumes:
      - multipart/form-data
      description: Create a new version with discussions and repository from zipped
        file in body
      parameters:
      - description: Repository to create
        in: formData
        name: repository
        required: true
        type: file
>>>>>>> main
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VersionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create new version
<<<<<<< HEAD
      tags:
      - versions
  /versions/{versionID}:
    get:
      consumes:
      - application/json
=======
  /versions/{versionID}:
    get:
>>>>>>> main
      description: Get a version by version ID
      parameters:
      - description: Version ID
        in: path
        name: versionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VersionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
<<<<<<< HEAD
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get version
      tags:
      - versions
  /versions/{versionID}/file:
    get:
      description: Get the contents of a single file from a repository of a version
=======
      summary: Get version
  /versions/{versionID}/discussions:
    get:
      description: |-
        Returns all discussions on this version that are not a reply to another discussion
        Endpoint is offset-paginated
>>>>>>> main
      parameters:
      - description: version ID
        in: path
        name: versionID
        required: true
        type: string
<<<<<<< HEAD
      - description: file path
        in: body
        name: filePath
        required: true
        schema:
          type: string
=======
      - description: page query
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
>>>>>>> main
      responses:
        "200":
          description: OK
          schema:
            items:
<<<<<<< HEAD
              type: integer
=======
              $ref: '#/definitions/models.DiscussionDTO'
>>>>>>> main
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
<<<<<<< HEAD
      summary: Get a file from a repository
      tags:
      - versions
  /versions/{versionID}/render:
    get:
      description: Get the render of the repository underlying a version
      parameters:
      - description: version ID
=======
      summary: Returns all level 1 discussions associated with the version
  /versions/{versionID}/file/{filepath}:
    get:
      description: Get the contents of a single file from a repository of a version
      parameters:
      - description: Version ID
        in: path
        name: versionID
        required: true
        type: string
      - description: Filepath
        in: path
        name: filepath
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get a file from a repository
  /versions/{versionID}/render:
    get:
      description: Get the render of the repository underlying a version if it exists
        and has been rendered successfully
      parameters:
      - description: Version ID
>>>>>>> main
        in: path
        name: versionID
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
<<<<<<< HEAD
=======
        "202":
          description: Accepted
          schema:
            type: string
>>>>>>> main
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
<<<<<<< HEAD
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get the render of a version
      tags:
      - versions
=======
      summary: Get the render of a version
>>>>>>> main
  /versions/{versionID}/repository:
    get:
      description: Get the entire zipped repository of a version
      parameters:
      - description: Version ID
        in: path
        name: versionID
        required: true
        type: string
      produces:
      - application/zip
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
<<<<<<< HEAD
=======
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
>>>>>>> main
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get the repository of a version
<<<<<<< HEAD
      tags:
      - versions
  /versions/{versionID}/tree:
    get:
      consumes:
      - application/json
      description: Get the file tree of a repository of a version
      parameters:
      - description: version ID
=======
  /versions/{versionID}/tree:
    get:
      description: Get the file tree of a repository of a version
      parameters:
      - description: Version ID
>>>>>>> main
        in: path
        name: versionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get the file tree of a repository
<<<<<<< HEAD
      tags:
      - versions
=======
>>>>>>> main
swagger: "2.0"
