// Code generated by MockGen. DO NOT EDIT.
// Source: ./discussionService_interface.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=./discussionService_interface.go -destination=../../mocks/discussionService_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	forms "gitlab.ewi.tudelft.nl/cse2000-software-project/2023-2024/cluster-v/17b/alexandria-backend/forms"
	models "gitlab.ewi.tudelft.nl/cse2000-software-project/2023-2024/cluster-v/17b/alexandria-backend/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDiscussionService is a mock of DiscussionService interface.
type MockDiscussionService struct {
	ctrl     *gomock.Controller
	recorder *MockDiscussionServiceMockRecorder
}

// MockDiscussionServiceMockRecorder is the mock recorder for MockDiscussionService.
type MockDiscussionServiceMockRecorder struct {
	mock *MockDiscussionService
}

// NewMockDiscussionService creates a new mock instance.
func NewMockDiscussionService(ctrl *gomock.Controller) *MockDiscussionService {
	mock := &MockDiscussionService{ctrl: ctrl}
	mock.recorder = &MockDiscussionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscussionService) EXPECT() *MockDiscussionServiceMockRecorder {
	return m.recorder
}

// CreateReply mocks base method.
func (m *MockDiscussionService) CreateReply(form *forms.ReplyDiscussionCreationForm, member *models.Member) (*models.Discussion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReply", form, member)
	ret0, _ := ret[0].(*models.Discussion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReply indicates an expected call of CreateReply.
func (mr *MockDiscussionServiceMockRecorder) CreateReply(form, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReply", reflect.TypeOf((*MockDiscussionService)(nil).CreateReply), form, member)
}

// CreateRootDiscussion mocks base method.
func (m *MockDiscussionService) CreateRootDiscussion(form *forms.RootDiscussionCreationForm, member *models.Member) (*models.Discussion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRootDiscussion", form, member)
	ret0, _ := ret[0].(*models.Discussion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRootDiscussion indicates an expected call of CreateRootDiscussion.
func (mr *MockDiscussionServiceMockRecorder) CreateRootDiscussion(form, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRootDiscussion", reflect.TypeOf((*MockDiscussionService)(nil).CreateRootDiscussion), form, member)
}

// GetDiscussion mocks base method.
func (m *MockDiscussionService) GetDiscussion(id uint) (*models.Discussion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscussion", id)
	ret0, _ := ret[0].(*models.Discussion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscussion indicates an expected call of GetDiscussion.
func (mr *MockDiscussionServiceMockRecorder) GetDiscussion(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscussion", reflect.TypeOf((*MockDiscussionService)(nil).GetDiscussion), id)
}
