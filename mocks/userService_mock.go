// Code generated by MockGen. DO NOT EDIT.
// Source: ./userService_interface.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.ewi.tudelft.nl/cse2000-software-project/2023-2024/cluster-v/17b/alexandria-backend/models"
	forms "gitlab.ewi.tudelft.nl/cse2000-software-project/2023-2024/cluster-v/17b/alexandria-backend/models/forms"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateCollaborator mocks base method.
func (m *MockUserService) CreateCollaborator(collaboratorForm *forms.CollaboratorCreationForm) *models.Collaborator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollaborator", collaboratorForm)
	ret0, _ := ret[0].(*models.Collaborator)
	return ret0
}

// CreateCollaborator indicates an expected call of CreateCollaborator.
func (mr *MockUserServiceMockRecorder) CreateCollaborator(collaboratorForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollaborator", reflect.TypeOf((*MockUserService)(nil).CreateCollaborator), collaboratorForm)
}

// CreateMember mocks base method.
func (m *MockUserService) CreateMember(memberForm *forms.MemberCreationForm) *models.Member {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", memberForm)
	ret0, _ := ret[0].(*models.Member)
	return ret0
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockUserServiceMockRecorder) CreateMember(memberForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockUserService)(nil).CreateMember), memberForm)
}

// GetCollaborator mocks base method.
func (m *MockUserService) GetCollaborator(collaboratorID uint64) (*models.Collaborator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollaborator", collaboratorID)
	ret0, _ := ret[0].(*models.Collaborator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollaborator indicates an expected call of GetCollaborator.
func (mr *MockUserServiceMockRecorder) GetCollaborator(collaboratorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollaborator", reflect.TypeOf((*MockUserService)(nil).GetCollaborator), collaboratorID)
}

// GetMember mocks base method.
func (m *MockUserService) GetMember(userID uint64) (*models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", userID)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockUserServiceMockRecorder) GetMember(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockUserService)(nil).GetMember), userID)
}

// UpdateCollaborator mocks base method.
func (m *MockUserService) UpdateCollaborator(updatedCollaborator *models.Collaborator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCollaborator", updatedCollaborator)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCollaborator indicates an expected call of UpdateCollaborator.
func (mr *MockUserServiceMockRecorder) UpdateCollaborator(updatedCollaborator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollaborator", reflect.TypeOf((*MockUserService)(nil).UpdateCollaborator), updatedCollaborator)
}

// UpdateMember mocks base method.
func (m *MockUserService) UpdateMember(updatedMember *models.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", updatedMember)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockUserServiceMockRecorder) UpdateMember(updatedMember interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockUserService)(nil).UpdateMember), updatedMember)
}
