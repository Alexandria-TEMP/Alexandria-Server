// Code generated by MockGen. DO NOT EDIT.
// Source: ./filesystem_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	multipart "mime/multipart"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	forms "gitlab.ewi.tudelft.nl/cse2000-software-project/2023-2024/cluster-v/17b/alexandria-backend/forms"
	gomock "go.uber.org/mock/gomock"
)

// MockFilesystem is a mock of Filesystem interface.
type MockFilesystem struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemMockRecorder
}

// MockFilesystemMockRecorder is the mock recorder for MockFilesystem.
type MockFilesystemMockRecorder struct {
	mock *MockFilesystem
}

// NewMockFilesystem creates a new mock instance.
func NewMockFilesystem(ctrl *gomock.Controller) *MockFilesystem {
	mock := &MockFilesystem{ctrl: ctrl}
	mock.recorder = &MockFilesystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystem) EXPECT() *MockFilesystemMockRecorder {
	return m.recorder
}

// CountRenderFiles mocks base method.
func (m *MockFilesystem) CountRenderFiles() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRenderFiles")
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRenderFiles indicates an expected call of CountRenderFiles.
func (mr *MockFilesystemMockRecorder) CountRenderFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRenderFiles", reflect.TypeOf((*MockFilesystem)(nil).CountRenderFiles))
}

// GetCurrentDirPath mocks base method.
func (m *MockFilesystem) GetCurrentDirPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentDirPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentDirPath indicates an expected call of GetCurrentDirPath.
func (mr *MockFilesystemMockRecorder) GetCurrentDirPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentDirPath", reflect.TypeOf((*MockFilesystem)(nil).GetCurrentDirPath))
}

// GetCurrentQuartoDirPath mocks base method.
func (m *MockFilesystem) GetCurrentQuartoDirPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentQuartoDirPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentQuartoDirPath indicates an expected call of GetCurrentQuartoDirPath.
func (mr *MockFilesystemMockRecorder) GetCurrentQuartoDirPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentQuartoDirPath", reflect.TypeOf((*MockFilesystem)(nil).GetCurrentQuartoDirPath))
}

// GetCurrentRenderDirPath mocks base method.
func (m *MockFilesystem) GetCurrentRenderDirPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRenderDirPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentRenderDirPath indicates an expected call of GetCurrentRenderDirPath.
func (mr *MockFilesystemMockRecorder) GetCurrentRenderDirPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRenderDirPath", reflect.TypeOf((*MockFilesystem)(nil).GetCurrentRenderDirPath))
}

// GetCurrentZipFilePath mocks base method.
func (m *MockFilesystem) GetCurrentZipFilePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentZipFilePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentZipFilePath indicates an expected call of GetCurrentZipFilePath.
func (mr *MockFilesystemMockRecorder) GetCurrentZipFilePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentZipFilePath", reflect.TypeOf((*MockFilesystem)(nil).GetCurrentZipFilePath))
}

// GetRenderFile mocks base method.
func (m *MockFilesystem) GetRenderFile() (forms.OutgoingFileForm, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRenderFile")
	ret0, _ := ret[0].(forms.OutgoingFileForm)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRenderFile indicates an expected call of GetRenderFile.
func (mr *MockFilesystemMockRecorder) GetRenderFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRenderFile", reflect.TypeOf((*MockFilesystem)(nil).GetRenderFile))
}

// GetRepositoryFile mocks base method.
func (m *MockFilesystem) GetRepositoryFile() (forms.OutgoingFileForm, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryFile")
	ret0, _ := ret[0].(forms.OutgoingFileForm)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepositoryFile indicates an expected call of GetRepositoryFile.
func (mr *MockFilesystemMockRecorder) GetRepositoryFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryFile", reflect.TypeOf((*MockFilesystem)(nil).GetRepositoryFile))
}

// RemoveProjectDirectory mocks base method.
func (m *MockFilesystem) RemoveProjectDirectory() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProjectDirectory")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProjectDirectory indicates an expected call of RemoveProjectDirectory.
func (mr *MockFilesystemMockRecorder) RemoveProjectDirectory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProjectDirectory", reflect.TypeOf((*MockFilesystem)(nil).RemoveProjectDirectory))
}

// RemoveRepository mocks base method.
func (m *MockFilesystem) RemoveRepository() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRepository")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRepository indicates an expected call of RemoveRepository.
func (mr *MockFilesystemMockRecorder) RemoveRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRepository", reflect.TypeOf((*MockFilesystem)(nil).RemoveRepository))
}

// SaveRepository mocks base method.
func (m *MockFilesystem) SaveRepository(c *gin.Context, file *multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRepository", c, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRepository indicates an expected call of SaveRepository.
func (mr *MockFilesystemMockRecorder) SaveRepository(c, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRepository", reflect.TypeOf((*MockFilesystem)(nil).SaveRepository), c, file)
}

// SetCurrentVersion mocks base method.
func (m *MockFilesystem) SetCurrentVersion(versionID, postID uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentVersion", versionID, postID)
}

// SetCurrentVersion indicates an expected call of SetCurrentVersion.
func (mr *MockFilesystemMockRecorder) SetCurrentVersion(versionID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentVersion", reflect.TypeOf((*MockFilesystem)(nil).SetCurrentVersion), versionID, postID)
}

// Unzip mocks base method.
func (m *MockFilesystem) Unzip() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unzip")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unzip indicates an expected call of Unzip.
func (mr *MockFilesystemMockRecorder) Unzip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unzip", reflect.TypeOf((*MockFilesystem)(nil).Unzip))
}
