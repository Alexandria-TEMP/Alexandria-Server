// Code generated by MockGen. DO NOT EDIT.
// Source: ./versionService_interface.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=./versionService_interface.go -destination=../../mocks/versionService_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	multipart "mime/multipart"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	models "gitlab.ewi.tudelft.nl/cse2000-software-project/2023-2024/cluster-v/17b/alexandria-backend/models"
	gomock "go.uber.org/mock/gomock"
)

// MockVersionService is a mock of VersionService interface.
type MockVersionService struct {
	ctrl     *gomock.Controller
	recorder *MockVersionServiceMockRecorder
}

// MockVersionServiceMockRecorder is the mock recorder for MockVersionService.
type MockVersionServiceMockRecorder struct {
	mock *MockVersionService
}

// NewMockVersionService creates a new mock instance.
func NewMockVersionService(ctrl *gomock.Controller) *MockVersionService {
	mock := &MockVersionService{ctrl: ctrl}
	mock.recorder = &MockVersionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionService) EXPECT() *MockVersionServiceMockRecorder {
	return m.recorder
}

// CreateVersion mocks base method.
func (m *MockVersionService) CreateVersion(c *gin.Context, file *multipart.FileHeader, postID uint) (*models.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVersion", c, file, postID)
	ret0, _ := ret[0].(*models.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVersion indicates an expected call of CreateVersion.
func (mr *MockVersionServiceMockRecorder) CreateVersion(c, file, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVersion", reflect.TypeOf((*MockVersionService)(nil).CreateVersion), c, file, postID)
}

// GetFileFromRepository mocks base method.
func (m *MockVersionService) GetFileFromRepository(versionID, postID uint, relFilepath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileFromRepository", versionID, postID, relFilepath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileFromRepository indicates an expected call of GetFileFromRepository.
func (mr *MockVersionServiceMockRecorder) GetFileFromRepository(versionID, postID, relFilepath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileFromRepository", reflect.TypeOf((*MockVersionService)(nil).GetFileFromRepository), versionID, postID, relFilepath)
}

// GetRenderFile mocks base method.
func (m *MockVersionService) GetRenderFile(versionID, postID uint) (string, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRenderFile", versionID, postID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRenderFile indicates an expected call of GetRenderFile.
func (mr *MockVersionServiceMockRecorder) GetRenderFile(versionID, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRenderFile", reflect.TypeOf((*MockVersionService)(nil).GetRenderFile), versionID, postID)
}

// GetRepositoryFile mocks base method.
func (m *MockVersionService) GetRepositoryFile(versionID, postID uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryFile", versionID, postID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryFile indicates an expected call of GetRepositoryFile.
func (mr *MockVersionServiceMockRecorder) GetRepositoryFile(versionID, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryFile", reflect.TypeOf((*MockVersionService)(nil).GetRepositoryFile), versionID, postID)
}

// GetTreeFromRepository mocks base method.
func (m *MockVersionService) GetTreeFromRepository(versionID, postID uint) (map[string]int64, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreeFromRepository", versionID, postID)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTreeFromRepository indicates an expected call of GetTreeFromRepository.
func (mr *MockVersionServiceMockRecorder) GetTreeFromRepository(versionID, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreeFromRepository", reflect.TypeOf((*MockVersionService)(nil).GetTreeFromRepository), versionID, postID)
}
