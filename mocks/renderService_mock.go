// Code generated by MockGen. DO NOT EDIT.
// Source: ./renderService_interface.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=./renderService_interface.go -destination=../../mocks/renderService_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "gitlab.ewi.tudelft.nl/cse2000-software-project/2023-2024/cluster-v/17b/alexandria-backend/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRenderService is a mock of RenderService interface.
type MockRenderService struct {
	ctrl     *gomock.Controller
	recorder *MockRenderServiceMockRecorder
}

// MockRenderServiceMockRecorder is the mock recorder for MockRenderService.
type MockRenderServiceMockRecorder struct {
	mock *MockRenderService
}

// NewMockRenderService creates a new mock instance.
func NewMockRenderService(ctrl *gomock.Controller) *MockRenderService {
	mock := &MockRenderService{ctrl: ctrl}
	mock.recorder = &MockRenderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenderService) EXPECT() *MockRenderServiceMockRecorder {
	return m.recorder
}

// GetRenderFile mocks base method.
func (m *MockRenderService) GetRenderFile(branchID uint) (string, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRenderFile", branchID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRenderFile indicates an expected call of GetRenderFile.
func (mr *MockRenderServiceMockRecorder) GetRenderFile(branchID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRenderFile", reflect.TypeOf((*MockRenderService)(nil).GetRenderFile), branchID)
}

// Render mocks base method.
func (m *MockRenderService) Render(arg0 *models.Branch) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Render", arg0)
}

// Render indicates an expected call of Render.
func (mr *MockRenderServiceMockRecorder) Render(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockRenderService)(nil).Render), arg0)
}
