// Code generated by MockGen. DO NOT EDIT.
// Source: ./renderService_interface.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=./renderService_interface.go -destination=../../mocks/renderService_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	flock "github.com/gofrs/flock"
	interfaces "gitlab.ewi.tudelft.nl/cse2000-software-project/2023-2024/cluster-v/17b/alexandria-backend/filesystem/interfaces"
	models "gitlab.ewi.tudelft.nl/cse2000-software-project/2023-2024/cluster-v/17b/alexandria-backend/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRenderService is a mock of RenderService interface.
type MockRenderService struct {
	ctrl     *gomock.Controller
	recorder *MockRenderServiceMockRecorder
}

// MockRenderServiceMockRecorder is the mock recorder for MockRenderService.
type MockRenderServiceMockRecorder struct {
	mock *MockRenderService
}

// NewMockRenderService creates a new mock instance.
func NewMockRenderService(ctrl *gomock.Controller) *MockRenderService {
	mock := &MockRenderService{ctrl: ctrl}
	mock.recorder = &MockRenderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenderService) EXPECT() *MockRenderServiceMockRecorder {
	return m.recorder
}

// GetMainRenderFile mocks base method.
func (m *MockRenderService) GetMainRenderFile(postID uint) (string, *flock.Flock, error, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainRenderFile", postID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*flock.Flock)
	ret2, _ := ret[2].(error)
	ret3, _ := ret[3].(error)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetMainRenderFile indicates an expected call of GetMainRenderFile.
func (mr *MockRenderServiceMockRecorder) GetMainRenderFile(postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainRenderFile", reflect.TypeOf((*MockRenderService)(nil).GetMainRenderFile), postID)
}

// GetRenderFile mocks base method.
func (m *MockRenderService) GetRenderFile(branchID uint) (string, *flock.Flock, error, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRenderFile", branchID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*flock.Flock)
	ret2, _ := ret[2].(error)
	ret3, _ := ret[3].(error)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetRenderFile indicates an expected call of GetRenderFile.
func (mr *MockRenderServiceMockRecorder) GetRenderFile(branchID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRenderFile", reflect.TypeOf((*MockRenderService)(nil).GetRenderFile), branchID)
}

// RenderBranch mocks base method.
func (m *MockRenderService) RenderBranch(arg0 *models.Branch, arg1 *flock.Flock, arg2 interfaces.Filesystem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderBranch", arg0, arg1, arg2)
}

// RenderBranch indicates an expected call of RenderBranch.
func (mr *MockRenderServiceMockRecorder) RenderBranch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderBranch", reflect.TypeOf((*MockRenderService)(nil).RenderBranch), arg0, arg1, arg2)
}

// RenderPost mocks base method.
func (m *MockRenderService) RenderPost(arg0 *models.Post, arg1 *flock.Flock, arg2 interfaces.Filesystem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderPost", arg0, arg1, arg2)
}

// RenderPost indicates an expected call of RenderPost.
func (mr *MockRenderServiceMockRecorder) RenderPost(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderPost", reflect.TypeOf((*MockRenderService)(nil).RenderPost), arg0, arg1, arg2)
}
