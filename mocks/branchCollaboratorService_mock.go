// Code generated by MockGen. DO NOT EDIT.
// Source: ./branchCollaboratorService_interface.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=./branchCollaboratorService_interface.go -destination=../../mocks/branchCollaboratorService_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "gitlab.ewi.tudelft.nl/cse2000-software-project/2023-2024/cluster-v/17b/alexandria-backend/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBranchCollaboratorService is a mock of BranchCollaboratorService interface.
type MockBranchCollaboratorService struct {
	ctrl     *gomock.Controller
	recorder *MockBranchCollaboratorServiceMockRecorder
}

// MockBranchCollaboratorServiceMockRecorder is the mock recorder for MockBranchCollaboratorService.
type MockBranchCollaboratorServiceMockRecorder struct {
	mock *MockBranchCollaboratorService
}

// NewMockBranchCollaboratorService creates a new mock instance.
func NewMockBranchCollaboratorService(ctrl *gomock.Controller) *MockBranchCollaboratorService {
	mock := &MockBranchCollaboratorService{ctrl: ctrl}
	mock.recorder = &MockBranchCollaboratorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBranchCollaboratorService) EXPECT() *MockBranchCollaboratorServiceMockRecorder {
	return m.recorder
}

// MembersToBranchCollaborators mocks base method.
func (m *MockBranchCollaboratorService) MembersToBranchCollaborators(memberIDs []uint, anonymous bool) ([]*models.BranchCollaborator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MembersToBranchCollaborators", memberIDs, anonymous)
	ret0, _ := ret[0].([]*models.BranchCollaborator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MembersToBranchCollaborators indicates an expected call of MembersToBranchCollaborators.
func (mr *MockBranchCollaboratorServiceMockRecorder) MembersToBranchCollaborators(memberIDs, anonymous any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MembersToBranchCollaborators", reflect.TypeOf((*MockBranchCollaboratorService)(nil).MembersToBranchCollaborators), memberIDs, anonymous)
}
