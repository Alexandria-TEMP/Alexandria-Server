// Code generated by MockGen. DO NOT EDIT.
// Source: ./modelRepository_interface.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=./modelRepository_interface.go -destination=../mocks/modelRepository_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	database "gitlab.ewi.tudelft.nl/cse2000-software-project/2023-2024/cluster-v/17b/alexandria-backend/database"
	gomock "go.uber.org/mock/gomock"
)

// MockModelRepositoryInterface is a mock of ModelRepositoryInterface interface.
type MockModelRepositoryInterface[T database.Model] struct {
	ctrl     *gomock.Controller
	recorder *MockModelRepositoryInterfaceMockRecorder[T]
}

// MockModelRepositoryInterfaceMockRecorder is the mock recorder for MockModelRepositoryInterface.
type MockModelRepositoryInterfaceMockRecorder[T database.Model] struct {
	mock *MockModelRepositoryInterface[T]
}

// NewMockModelRepositoryInterface creates a new mock instance.
func NewMockModelRepositoryInterface[T database.Model](ctrl *gomock.Controller) *MockModelRepositoryInterface[T] {
	mock := &MockModelRepositoryInterface[T]{ctrl: ctrl}
	mock.recorder = &MockModelRepositoryInterfaceMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelRepositoryInterface[T]) EXPECT() *MockModelRepositoryInterfaceMockRecorder[T] {
	return m.recorder
}

// Create mocks base method.
func (m *MockModelRepositoryInterface[T]) Create(object T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockModelRepositoryInterfaceMockRecorder[T]) Create(object any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockModelRepositoryInterface[T])(nil).Create), object)
}

// Delete mocks base method.
func (m *MockModelRepositoryInterface[T]) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockModelRepositoryInterfaceMockRecorder[T]) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockModelRepositoryInterface[T])(nil).Delete), id)
}

// GetByID mocks base method.
func (m *MockModelRepositoryInterface[T]) GetByID(id uint) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockModelRepositoryInterfaceMockRecorder[T]) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockModelRepositoryInterface[T])(nil).GetByID), id)
}

// Query mocks base method.
func (m *MockModelRepositoryInterface[T]) Query(conds ...any) ([]T, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockModelRepositoryInterfaceMockRecorder[T]) Query(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockModelRepositoryInterface[T])(nil).Query), conds...)
}

// QueryPaginated mocks base method.
func (m *MockModelRepositoryInterface[T]) QueryPaginated(page, size int, conds ...any) ([]T, error) {
	m.ctrl.T.Helper()
	varargs := []any{page, size}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryPaginated", varargs...)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPaginated indicates an expected call of QueryPaginated.
func (mr *MockModelRepositoryInterfaceMockRecorder[T]) QueryPaginated(page, size any, conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{page, size}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPaginated", reflect.TypeOf((*MockModelRepositoryInterface[T])(nil).QueryPaginated), varargs...)
}

// Update mocks base method.
func (m *MockModelRepositoryInterface[T]) Update(object T) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", object)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockModelRepositoryInterfaceMockRecorder[T]) Update(object any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockModelRepositoryInterface[T])(nil).Update), object)
}
